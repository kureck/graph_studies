
References:

Shortest Path: https://en.wikipedia.org/wiki/Dijkstra's_algorithm

Represent Graph in Python: http://www.python-course.eu/graphs_python.php

https://github.com/pmatiello/python-graph

The alternative to NetworkX is to implement my own graph structure and graph explorer methods.

There are two possibilites:

1) create a dict like structure
Graph: AB5, BC4, CD8, DC8, DE6, AD5, CE2, EB3, AE7
{
    "A": { "B": 5, "D": 5, "E": 7},
    "B": { "C": 4},
    "C": { "D": 8, "E": 2},
    "D": { "C": 8, "E": 6}, 
    "E": { "B": 3}
}

2) a Graph class

To find the shortest path I'm going to use Dijkstra algorithm.

To calculate the distance between nodes I'm going to traverse the graph

